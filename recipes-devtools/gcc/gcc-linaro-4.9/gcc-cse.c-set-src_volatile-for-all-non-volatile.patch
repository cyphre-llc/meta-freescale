From 7e2d1d8da1204a72e964339a73605384658af3cb Mon Sep 17 00:00:00 2001
From: Ting Liu <ting.liu@freescale.com>
Date: Tue, 1 Sep 2015 23:03:47 +0800
Subject: [PATCH 1/4] gcc/cse.c: set src_volatile for all non-volatile

When using gcc-linaro-4.9 to build u-boot for ls1021atwr (ARM Cortex-A7
MPCore compliant with ARMv7-A architecture), U-boot hangs at PCI-E.

This reverts the below commit in gcc to avoid this issue:
        PR rtl-optimization/63637
        PR rtl-optimization/60663
        * cse.c (merge_equiv_classes): Set new_elt->cost to MAX_COST
        if elt->cost is MAX_COST for ASM_OPERANDS.
        (find_sets_in_insn): Fix up comment typo.
        (cse_insn): Don't set src_volatile for all non-volatile
        ASM_OPERANDS in PARALLELs, but just those with multiple outputs
        or with "memory" clobber.  Set elt->cost to MAX_COST
        for ASM_OPERANDS in PARALLEL.  Set src_elt->cost to MAX_COST
        if new_src is ASM_OPERANDS and elt->cost is MAX_COST.
    
        * gcc.dg/pr63637-1.c: New test.
        * gcc.dg/pr63637-2.c: New test.
        * gcc.dg/pr63637-3.c: New test.
        * gcc.dg/pr63637-4.c: New test.
        * gcc.dg/pr63637-5.c: New test.
        * gcc.dg/pr63637-6.c: New test.
        * gcc.target/i386/pr63637-1.c: New test.
        * gcc.target/i386/pr63637-2.c: New test.
        * gcc.target/i386/pr63637-3.c: New test.
        * gcc.target/i386/pr63637-4.c: New test.
        * gcc.target/i386/pr63637-5.c: New test.
        * gcc.target/i386/pr63637-6.c: New test.

git-svn-id: svn+ssh://gcc.gnu.org/svn/gcc/branches/gcc-4_9-branch@220323 138bc75d-0d04-0410-961f-82ee72b054a4
git://gcc.gnu.org/git/gcc.git: commit:20d3ff08324bf0be21c3d984af009a92b8cf81d1
http://git.linaro.org/toolchain/gcc.git: commit:e4f9e85e8152379aef373772b22075539920ffa2

Signed-off-by: Ting Liu <ting.liu@freescale.com>
---
 gcc/cse.c | 20 +-------------------
 1 file changed, 1 insertion(+), 19 deletions(-)

diff --git a/gcc/cse.c b/gcc/cse.c
index 9b8b816..52c1b0f 100644
--- a/gcc/cse.c
+++ b/gcc/cse.c
@@ -4646,25 +4646,7 @@ cse_insn (rtx insn)
 
       else if (GET_CODE (src) == ASM_OPERANDS
 	       && GET_CODE (x) == PARALLEL)
-	{
-	  /* Do not record result of a non-volatile inline asm with
-	     more than one result.  */
-	  if (n_sets > 1)
-	    sets[i].src_volatile = 1;
-
-	  int j, lim = XVECLEN (x, 0);
-	  for (j = 0; j < lim; j++)
-	    {
-	      rtx y = XVECEXP (x, 0, j);
-	      /* And do not record result of a non-volatile inline asm
-		 with "memory" clobber.  */
-	      if (GET_CODE (y) == CLOBBER && MEM_P (XEXP (y, 0)))
-		{
-		  sets[i].src_volatile = 1;
-		  break;
-		}
-	    }
-	}
+       sets[i].src_volatile = 1;
 
 #if 0
       /* It is no longer clear why we used to do this, but it doesn't
-- 
1.8.3.2

